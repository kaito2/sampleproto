// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/multigreeter/v1/multigreeter.proto

package multigreeter

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/kaito2/sampleproto/go-protos/request/v1"
	v11 "github.com/kaito2/sampleproto/go-protos/response/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("protos/multigreeter/v1/multigreeter.proto", fileDescriptor_2227152d2a821f65)
}

var fileDescriptor_2227152d2a821f65 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0xcf, 0x2d, 0xcd, 0x29, 0xc9, 0x4c, 0x2f, 0x4a, 0x4d, 0x2d, 0x49, 0x2d, 0xd2,
	0x2f, 0x33, 0x44, 0xe1, 0xeb, 0x81, 0xd5, 0x08, 0x89, 0x41, 0x94, 0xea, 0xa1, 0x48, 0x95, 0x19,
	0x4a, 0xa9, 0x40, 0x8d, 0x28, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x01, 0xe9, 0xce, 0x48, 0xcd,
	0xc9, 0xc9, 0x87, 0xf2, 0x21, 0xba, 0xa5, 0xd4, 0xe0, 0xaa, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53,
	0x91, 0x94, 0x41, 0x04, 0xa0, 0xea, 0x64, 0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b,
	0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0xb2, 0x46,
	0x75, 0x5c, 0x3c, 0xbe, 0x20, 0xeb, 0xdd, 0x21, 0xd6, 0x0b, 0xe5, 0x71, 0x71, 0x14, 0x27, 0x56,
	0x7a, 0x80, 0xcc, 0x11, 0x92, 0xd7, 0x83, 0x3a, 0x10, 0x66, 0x71, 0x99, 0xa1, 0x1e, 0x58, 0x26,
	0x08, 0xc2, 0x97, 0x92, 0x43, 0x28, 0x80, 0x5a, 0x89, 0x50, 0x51, 0x90, 0x53, 0xa9, 0x24, 0xdf,
	0x74, 0xf9, 0xc9, 0x64, 0x26, 0x49, 0x21, 0x71, 0xf4, 0x00, 0xd0, 0xaf, 0xce, 0x4b, 0xcc, 0x4d,
	0xad, 0x35, 0x60, 0x74, 0x72, 0x8b, 0x72, 0x49, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce,
	0xcf, 0xd5, 0xcf, 0x4e, 0xcc, 0x2c, 0xc9, 0x37, 0xd2, 0x2f, 0x4e, 0xcc, 0x2d, 0xc8, 0x49, 0x05,
	0x9b, 0xad, 0x9f, 0x9e, 0xaf, 0x8b, 0x3d, 0x44, 0xad, 0x91, 0xf9, 0x49, 0x6c, 0x60, 0x45, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0xb1, 0xa6, 0xaa, 0x7f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MultiGreeterClient is the client API for MultiGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MultiGreeterClient interface {
	// Sends multiple greetings
	SayHello(ctx context.Context, in *v1.HelloRequest, opts ...grpc.CallOption) (MultiGreeter_SayHelloClient, error)
}

type multiGreeterClient struct {
	cc *grpc.ClientConn
}

func NewMultiGreeterClient(cc *grpc.ClientConn) MultiGreeterClient {
	return &multiGreeterClient{cc}
}

func (c *multiGreeterClient) SayHello(ctx context.Context, in *v1.HelloRequest, opts ...grpc.CallOption) (MultiGreeter_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MultiGreeter_serviceDesc.Streams[0], "/protos.multigreeter.v1.MultiGreeter/sayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiGreeterSayHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MultiGreeter_SayHelloClient interface {
	Recv() (*v11.HelloReply, error)
	grpc.ClientStream
}

type multiGreeterSayHelloClient struct {
	grpc.ClientStream
}

func (x *multiGreeterSayHelloClient) Recv() (*v11.HelloReply, error) {
	m := new(v11.HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultiGreeterServer is the server API for MultiGreeter service.
type MultiGreeterServer interface {
	// Sends multiple greetings
	SayHello(*v1.HelloRequest, MultiGreeter_SayHelloServer) error
}

func RegisterMultiGreeterServer(s *grpc.Server, srv MultiGreeterServer) {
	s.RegisterService(&_MultiGreeter_serviceDesc, srv)
}

func _MultiGreeter_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MultiGreeterServer).SayHello(m, &multiGreeterSayHelloServer{stream})
}

type MultiGreeter_SayHelloServer interface {
	Send(*v11.HelloReply) error
	grpc.ServerStream
}

type multiGreeterSayHelloServer struct {
	grpc.ServerStream
}

func (x *multiGreeterSayHelloServer) Send(m *v11.HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

var _MultiGreeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.multigreeter.v1.MultiGreeter",
	HandlerType: (*MultiGreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sayHello",
			Handler:       _MultiGreeter_SayHello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/multigreeter/v1/multigreeter.proto",
}
